// Generated by rstantools.  Do not edit by hand.

/*
    bsrmm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bsrmm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bsrmm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_bsrmmlogt_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_bsrmmlogt");
    reader.add_event(168, 166, "end", "model_bsrmmlogt");
    return reader;
}
#include <stan_meta_header.hpp>
class model_bsrmmlogt
  : public stan::model::model_base_crtp<model_bsrmmlogt> {
private:
        int T;
        int N;
        int J;
        int K;
        double H;
        std::vector<int> SBU;
        std::vector<int> BU;
        vector_d Y;
        std::vector<std::vector<int> > CNTS;
        double a_lambda;
        double b_lambda;
        vector_d r_diric;
        double a_nu;
        double b_nu;
        double scale_sigma;
        double scale_intercept;
        double sigma_tilde;
        double m0;
        double slab_scale;
        double slab_df;
        double slab_scale2;
        double half_slab_df;
        vector_d logY;
        double logH;
        matrix_d X;
public:
    model_bsrmmlogt(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_bsrmmlogt(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_bsrmmlogt_namespace::model_bsrmmlogt";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            check_greater_or_equal(function__, "T", T, 0);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 0);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "H", "double", context__.to_vec());
            H = double(0);
            vals_r__ = context__.vals_r("H");
            pos__ = 0;
            H = vals_r__[pos__++];
            check_greater_or_equal(function__, "H", H, 0);
            current_statement_begin__ = 13;
            validate_non_negative_index("SBU", "N", N);
            context__.validate_dims("data initialization", "SBU", "int", context__.to_vec(N));
            SBU = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("SBU");
            pos__ = 0;
            size_t SBU_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < SBU_k_0_max__; ++k_0__) {
                SBU[k_0__] = vals_i__[pos__++];
            }
            size_t SBU_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < SBU_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "SBU[i_0__]", SBU[i_0__], 1);
                check_less_or_equal(function__, "SBU[i_0__]", SBU[i_0__], J);
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("BU", "J", J);
            context__.validate_dims("data initialization", "BU", "int", context__.to_vec(J));
            BU = std::vector<int>(J, int(0));
            vals_i__ = context__.vals_i("BU");
            pos__ = 0;
            size_t BU_k_0_max__ = J;
            for (size_t k_0__ = 0; k_0__ < BU_k_0_max__; ++k_0__) {
                BU[k_0__] = vals_i__[pos__++];
            }
            size_t BU_i_0_max__ = J;
            for (size_t i_0__ = 0; i_0__ < BU_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "BU[i_0__]", BU[i_0__], 1);
                check_less_or_equal(function__, "BU[i_0__]", BU[i_0__], K);
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("Y", "N", N);
            context__.validate_dims("data initialization", "Y", "vector_d", context__.to_vec(N));
            Y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Y_j_1_max__; ++j_1__) {
                Y(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "Y", Y, H);
            current_statement_begin__ = 16;
            validate_non_negative_index("CNTS", "T", T);
            validate_non_negative_index("CNTS", "J", J);
            context__.validate_dims("data initialization", "CNTS", "int", context__.to_vec(T,J));
            CNTS = std::vector<std::vector<int> >(T, std::vector<int>(J, int(0)));
            vals_i__ = context__.vals_i("CNTS");
            pos__ = 0;
            size_t CNTS_k_0_max__ = T;
            size_t CNTS_k_1_max__ = J;
            for (size_t k_1__ = 0; k_1__ < CNTS_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < CNTS_k_0_max__; ++k_0__) {
                    CNTS[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "a_lambda", "double", context__.to_vec());
            a_lambda = double(0);
            vals_r__ = context__.vals_r("a_lambda");
            pos__ = 0;
            a_lambda = vals_r__[pos__++];
            check_greater_or_equal(function__, "a_lambda", a_lambda, 0);
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "b_lambda", "double", context__.to_vec());
            b_lambda = double(0);
            vals_r__ = context__.vals_r("b_lambda");
            pos__ = 0;
            b_lambda = vals_r__[pos__++];
            check_greater_or_equal(function__, "b_lambda", b_lambda, 0);
            current_statement_begin__ = 25;
            validate_non_negative_index("r_diric", "J", J);
            context__.validate_dims("data initialization", "r_diric", "vector_d", context__.to_vec(J));
            r_diric = Eigen::Matrix<double, Eigen::Dynamic, 1>(J);
            vals_r__ = context__.vals_r("r_diric");
            pos__ = 0;
            size_t r_diric_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < r_diric_j_1_max__; ++j_1__) {
                r_diric(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "r_diric", r_diric, 0);
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "a_nu", "double", context__.to_vec());
            a_nu = double(0);
            vals_r__ = context__.vals_r("a_nu");
            pos__ = 0;
            a_nu = vals_r__[pos__++];
            check_greater_or_equal(function__, "a_nu", a_nu, 0);
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "b_nu", "double", context__.to_vec());
            b_nu = double(0);
            vals_r__ = context__.vals_r("b_nu");
            pos__ = 0;
            b_nu = vals_r__[pos__++];
            check_greater_or_equal(function__, "b_nu", b_nu, 0);
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "scale_sigma", "double", context__.to_vec());
            scale_sigma = double(0);
            vals_r__ = context__.vals_r("scale_sigma");
            pos__ = 0;
            scale_sigma = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_sigma", scale_sigma, 0);
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "scale_intercept", "double", context__.to_vec());
            scale_intercept = double(0);
            vals_r__ = context__.vals_r("scale_intercept");
            pos__ = 0;
            scale_intercept = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_intercept", scale_intercept, 0);
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "sigma_tilde", "double", context__.to_vec());
            sigma_tilde = double(0);
            vals_r__ = context__.vals_r("sigma_tilde");
            pos__ = 0;
            sigma_tilde = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_tilde", sigma_tilde, 0);
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "m0", "double", context__.to_vec());
            m0 = double(0);
            vals_r__ = context__.vals_r("m0");
            pos__ = 0;
            m0 = vals_r__[pos__++];
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "slab_scale", "double", context__.to_vec());
            slab_scale = double(0);
            vals_r__ = context__.vals_r("slab_scale");
            pos__ = 0;
            slab_scale = vals_r__[pos__++];
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "slab_df", "double", context__.to_vec());
            slab_df = double(0);
            vals_r__ = context__.vals_r("slab_df");
            pos__ = 0;
            slab_df = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 56;
            slab_scale2 = double(0);
            stan::math::fill(slab_scale2, DUMMY_VAR__);
            stan::math::assign(slab_scale2,square(slab_scale));
            current_statement_begin__ = 57;
            half_slab_df = double(0);
            stan::math::fill(half_slab_df, DUMMY_VAR__);
            stan::math::assign(half_slab_df,(0.5 * slab_df));
            current_statement_begin__ = 60;
            validate_non_negative_index("logY", "N", N);
            logY = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(logY, DUMMY_VAR__);
            stan::math::assign(logY,stan::math::log(Y));
            current_statement_begin__ = 61;
            logH = double(0);
            stan::math::fill(logH, DUMMY_VAR__);
            stan::math::assign(logH,stan::math::log(H));
            current_statement_begin__ = 64;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "J", J);
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, J);
            stan::math::fill(X, DUMMY_VAR__);
            stan::math::assign(X,rep_matrix(0, N, J));
            // execute transformed data statements
            current_statement_begin__ = 65;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 66;
                stan::model::assign(X, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(get_base1(SBU, n, "SBU", 1)), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable X");
            }
            // validate transformed data
            current_statement_begin__ = 60;
            check_greater_or_equal(function__, "logY", logY, stan::math::log(H));
            current_statement_begin__ = 61;
            check_greater_or_equal(function__, "logH", logH, 0);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 71;
            num_params_r__ += 1;
            current_statement_begin__ = 72;
            validate_non_negative_index("beta_tilde", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 73;
            validate_non_negative_index("phi", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 74;
            num_params_r__ += 1;
            current_statement_begin__ = 75;
            num_params_r__ += 1;
            current_statement_begin__ = 76;
            validate_non_negative_index("sigma", "J", J);
            num_params_r__ += (1 * J);
            current_statement_begin__ = 77;
            validate_non_negative_index("sigma_bu", "K", K);
            num_params_r__ += (1 * K);
            current_statement_begin__ = 78;
            validate_non_negative_index("nu", "J", J);
            num_params_r__ += (1 * J);
            current_statement_begin__ = 79;
            num_params_r__ += 1;
            current_statement_begin__ = 80;
            validate_non_negative_index("theta", "J", J);
            num_params_r__ += (J - 1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_bsrmmlogt() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 71;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 72;
        if (!(context__.contains_r("beta_tilde")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_tilde missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_tilde");
        pos__ = 0U;
        validate_non_negative_index("beta_tilde", "J", J);
        context__.validate_dims("parameter initialization", "beta_tilde", "vector_d", context__.to_vec(J));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_tilde(J);
        size_t beta_tilde_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < beta_tilde_j_1_max__; ++j_1__) {
            beta_tilde(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_tilde);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_tilde: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 73;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "J", J);
        context__.validate_dims("parameter initialization", "phi", "vector_d", context__.to_vec(J));
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi(J);
        size_t phi_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            phi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 74;
        if (!(context__.contains_r("c2_tilde")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable c2_tilde missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("c2_tilde");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "c2_tilde", "double", context__.to_vec());
        double c2_tilde(0);
        c2_tilde = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, c2_tilde);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable c2_tilde: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 75;
        if (!(context__.contains_r("tau_tilde")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_tilde missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_tilde");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_tilde", "double", context__.to_vec());
        double tau_tilde(0);
        tau_tilde = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_tilde);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_tilde: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 76;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "J", J);
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec(J));
        std::vector<double> sigma(J, double(0));
        size_t sigma_k_0_max__ = J;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            sigma[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_0_max__ = J;
        for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 77;
        if (!(context__.contains_r("sigma_bu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_bu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_bu");
        pos__ = 0U;
        validate_non_negative_index("sigma_bu", "K", K);
        context__.validate_dims("parameter initialization", "sigma_bu", "double", context__.to_vec(K));
        std::vector<double> sigma_bu(K, double(0));
        size_t sigma_bu_k_0_max__ = K;
        for (size_t k_0__ = 0; k_0__ < sigma_bu_k_0_max__; ++k_0__) {
            sigma_bu[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_bu_i_0_max__ = K;
        for (size_t i_0__ = 0; i_0__ < sigma_bu_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma_bu[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_bu: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 78;
        if (!(context__.contains_r("nu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu");
        pos__ = 0U;
        validate_non_negative_index("nu", "J", J);
        context__.validate_dims("parameter initialization", "nu", "double", context__.to_vec(J));
        std::vector<double> nu(J, double(0));
        size_t nu_k_0_max__ = J;
        for (size_t k_0__ = 0; k_0__ < nu_k_0_max__; ++k_0__) {
            nu[k_0__] = vals_r__[pos__++];
        }
        size_t nu_i_0_max__ = J;
        for (size_t i_0__ = 0; i_0__ < nu_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, nu[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 79;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda", "double", context__.to_vec());
        double lambda(0);
        lambda = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 80;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "J", J);
        context__.validate_dims("parameter initialization", "theta", "vector_d", context__.to_vec(J));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta(J);
        size_t theta_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            theta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 71;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.scalar_constrain(lp__);
            else
                alpha = in__.scalar_constrain();
            current_statement_begin__ = 72;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_tilde;
            (void) beta_tilde;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_tilde = in__.vector_constrain(J, lp__);
            else
                beta_tilde = in__.vector_constrain(J);
            current_statement_begin__ = 73;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.vector_lb_constrain(0, J, lp__);
            else
                phi = in__.vector_lb_constrain(0, J);
            current_statement_begin__ = 74;
            local_scalar_t__ c2_tilde;
            (void) c2_tilde;  // dummy to suppress unused var warning
            if (jacobian__)
                c2_tilde = in__.scalar_lb_constrain(0, lp__);
            else
                c2_tilde = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 75;
            local_scalar_t__ tau_tilde;
            (void) tau_tilde;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_tilde = in__.scalar_lb_constrain(0, lp__);
            else
                tau_tilde = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 76;
            std::vector<local_scalar_t__> sigma;
            size_t sigma_d_0_max__ = J;
            sigma.reserve(sigma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 77;
            std::vector<local_scalar_t__> sigma_bu;
            size_t sigma_bu_d_0_max__ = K;
            sigma_bu.reserve(sigma_bu_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_bu_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_bu.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma_bu.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 78;
            std::vector<local_scalar_t__> nu;
            size_t nu_d_0_max__ = J;
            nu.reserve(nu_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < nu_d_0_max__; ++d_0__) {
                if (jacobian__)
                    nu.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    nu.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 79;
            local_scalar_t__ lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.scalar_lb_constrain(0, lp__);
            else
                lambda = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 80;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.simplex_constrain(J, lp__);
            else
                theta = in__.simplex_constrain(J);
            // transformed parameters
            current_statement_begin__ = 84;
            validate_non_negative_index("beta", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta(J);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("mu", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(J);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 88;
            validate_non_negative_index("mu_aux", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_aux(N);
            stan::math::initialize(mu_aux, DUMMY_VAR__);
            stan::math::fill(mu_aux, DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("sigma_aux", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_aux(N);
            stan::math::initialize(sigma_aux, DUMMY_VAR__);
            stan::math::fill(sigma_aux, DUMMY_VAR__);
            current_statement_begin__ = 90;
            validate_non_negative_index("nu_aux", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nu_aux(N);
            stan::math::initialize(nu_aux, DUMMY_VAR__);
            stan::math::fill(nu_aux, DUMMY_VAR__);
            current_statement_begin__ = 92;
            validate_non_negative_index("sigma_prod_bu", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_prod_bu(J);
            stan::math::initialize(sigma_prod_bu, DUMMY_VAR__);
            stan::math::fill(sigma_prod_bu, DUMMY_VAR__);
            current_statement_begin__ = 93;
            validate_non_negative_index("pp", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pp(J);
            stan::math::initialize(pp, DUMMY_VAR__);
            stan::math::fill(pp, DUMMY_VAR__);
            current_statement_begin__ = 96;
            validate_non_negative_index("lambdas", "J", J);
            std::vector<local_scalar_t__> lambdas(J, local_scalar_t__(0));
            stan::math::initialize(lambdas, DUMMY_VAR__);
            stan::math::fill(lambdas, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 97;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 98;
                stan::model::assign(lambdas, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(theta, j, "theta", 1) * lambda), 
                            "assigning variable lambdas");
            }
            {
            current_statement_begin__ = 103;
            local_scalar_t__ tau0(DUMMY_VAR__);
            (void) tau0;  // dummy to suppress unused var warning
            stan::math::initialize(tau0, DUMMY_VAR__);
            stan::math::fill(tau0, DUMMY_VAR__);
            stan::math::assign(tau0,((m0 / (J - m0)) * (sigma_tilde / stan::math::sqrt((1.0 * N)))));
            current_statement_begin__ = 104;
            local_scalar_t__ tau(DUMMY_VAR__);
            (void) tau;  // dummy to suppress unused var warning
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            stan::math::assign(tau,(tau0 * tau_tilde));
            current_statement_begin__ = 108;
            local_scalar_t__ c2(DUMMY_VAR__);
            (void) c2;  // dummy to suppress unused var warning
            stan::math::initialize(c2, DUMMY_VAR__);
            stan::math::fill(c2, DUMMY_VAR__);
            stan::math::assign(c2,(slab_scale2 * c2_tilde));
            current_statement_begin__ = 110;
            validate_non_negative_index("phi_tilde", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi_tilde(J);
            stan::math::initialize(phi_tilde, DUMMY_VAR__);
            stan::math::fill(phi_tilde, DUMMY_VAR__);
            stan::math::assign(phi_tilde,stan::math::sqrt(elt_divide(multiply(c2, square(phi)), add(c2, multiply(square(tau), square(phi))))));
            current_statement_begin__ = 114;
            stan::math::assign(beta, elt_multiply(multiply(tau, phi_tilde), beta_tilde));
            current_statement_begin__ = 115;
            stan::math::assign(mu_aux, add(alpha, multiply(X, beta)));
            current_statement_begin__ = 117;
            stan::math::assign(mu, add(alpha, beta));
            }
            current_statement_begin__ = 122;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 123;
                stan::model::assign(sigma_aux, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(sigma, get_base1(SBU, i, "SBU", 1), "sigma", 1), 
                            "assigning variable sigma_aux");
                current_statement_begin__ = 124;
                stan::model::assign(nu_aux, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(nu, get_base1(SBU, i, "SBU", 1), "nu", 1), 
                            "assigning variable nu_aux");
            }
            current_statement_begin__ = 127;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 128;
                stan::model::assign(sigma_prod_bu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            get_base1(sigma_bu, get_base1(BU, j, "BU", 1), "sigma_bu", 1), 
                            "assigning variable sigma_prod_bu");
                current_statement_begin__ = 129;
                stan::model::assign(pp, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (1 - student_t_cdf(logH, get_base1(nu, j, "nu", 1), get_base1(mu, j, "mu", 1), get_base1(sigma, j, "sigma", 1))), 
                            "assigning variable pp");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 84;
            size_t beta_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 85;
            size_t mu_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 88;
            size_t mu_aux_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_aux_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu_aux(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_aux" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_aux: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 89;
            size_t sigma_aux_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigma_aux_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma_aux(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma_aux" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma_aux: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "sigma_aux", sigma_aux, 0);
            current_statement_begin__ = 90;
            size_t nu_aux_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < nu_aux_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(nu_aux(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: nu_aux" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable nu_aux: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "nu_aux", nu_aux, 0);
            current_statement_begin__ = 92;
            size_t sigma_prod_bu_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < sigma_prod_bu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma_prod_bu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma_prod_bu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma_prod_bu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "sigma_prod_bu", sigma_prod_bu, 0);
            current_statement_begin__ = 93;
            size_t pp_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < pp_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(pp(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: pp" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pp: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "pp", pp, 0);
            check_less_or_equal(function__, "pp", pp, 1);
            current_statement_begin__ = 96;
            size_t lambdas_k_0_max__ = J;
            for (size_t k_0__ = 0; k_0__ < lambdas_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(lambdas[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambdas" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambdas: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 133;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 134;
            validate_non_negative_index("log_lik_cnts", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_lik_cnts(J);
            stan::math::initialize(log_lik_cnts, DUMMY_VAR__);
            stan::math::fill(log_lik_cnts, DUMMY_VAR__);
            current_statement_begin__ = 137;
            lp_accum__.add(gamma_log<propto__>(lambda, a_lambda, b_lambda));
            current_statement_begin__ = 138;
            lp_accum__.add(dirichlet_log<propto__>(theta, r_diric));
            current_statement_begin__ = 142;
            lp_accum__.add(gamma_log<propto__>(nu, a_nu, b_nu));
            current_statement_begin__ = 145;
            lp_accum__.add(cauchy_log<propto__>(sigma_bu, 0, scale_sigma));
            current_statement_begin__ = 146;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, sigma_prod_bu));
            current_statement_begin__ = 149;
            lp_accum__.add(normal_log<propto__>(alpha, 0, scale_intercept));
            current_statement_begin__ = 151;
            lp_accum__.add(normal_log<propto__>(beta_tilde, 0, 1));
            current_statement_begin__ = 152;
            lp_accum__.add(cauchy_log<propto__>(phi, 0, 1));
            current_statement_begin__ = 153;
            lp_accum__.add(cauchy_log<propto__>(tau_tilde, 0, 1));
            current_statement_begin__ = 154;
            lp_accum__.add(inv_gamma_log<propto__>(c2_tilde, half_slab_df, half_slab_df));
            current_statement_begin__ = 158;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 159;
                stan::model::assign(log_lik_cnts, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            poisson_log(stan::model::rvalue(CNTS, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "CNTS"), (get_base1(lambdas, j, "lambdas", 1) * get_base1(pp, j, "pp", 1))), 
                            "assigning variable log_lik_cnts");
            }
            current_statement_begin__ = 162;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 163;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (student_t_log(get_base1(logY, n, "logY", 1), get_base1(nu_aux, n, "nu_aux", 1), get_base1(mu_aux, n, "mu_aux", 1), get_base1(sigma_aux, n, "sigma_aux", 1)) - stan::math::log(get_base1(pp, get_base1(SBU, n, "SBU", 1), "pp", 1))), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 165;
            lp_accum__.add((sum(log_lik) + sum(log_lik_cnts)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("beta_tilde");
        names__.push_back("phi");
        names__.push_back("c2_tilde");
        names__.push_back("tau_tilde");
        names__.push_back("sigma");
        names__.push_back("sigma_bu");
        names__.push_back("nu");
        names__.push_back("lambda");
        names__.push_back("theta");
        names__.push_back("beta");
        names__.push_back("mu");
        names__.push_back("mu_aux");
        names__.push_back("sigma_aux");
        names__.push_back("nu_aux");
        names__.push_back("sigma_prod_bu");
        names__.push_back("pp");
        names__.push_back("lambdas");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_bsrmmlogt_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double alpha = in__.scalar_constrain();
        vars__.push_back(alpha);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_tilde = in__.vector_constrain(J);
        size_t beta_tilde_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < beta_tilde_j_1_max__; ++j_1__) {
            vars__.push_back(beta_tilde(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi = in__.vector_lb_constrain(0, J);
        size_t phi_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            vars__.push_back(phi(j_1__));
        }
        double c2_tilde = in__.scalar_lb_constrain(0);
        vars__.push_back(c2_tilde);
        double tau_tilde = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_tilde);
        std::vector<double> sigma;
        size_t sigma_d_0_max__ = J;
        sigma.reserve(sigma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_k_0_max__ = J;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        std::vector<double> sigma_bu;
        size_t sigma_bu_d_0_max__ = K;
        sigma_bu.reserve(sigma_bu_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_bu_d_0_max__; ++d_0__) {
            sigma_bu.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_bu_k_0_max__ = K;
        for (size_t k_0__ = 0; k_0__ < sigma_bu_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_bu[k_0__]);
        }
        std::vector<double> nu;
        size_t nu_d_0_max__ = J;
        nu.reserve(nu_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < nu_d_0_max__; ++d_0__) {
            nu.push_back(in__.scalar_lb_constrain(0));
        }
        size_t nu_k_0_max__ = J;
        for (size_t k_0__ = 0; k_0__ < nu_k_0_max__; ++k_0__) {
            vars__.push_back(nu[k_0__]);
        }
        double lambda = in__.scalar_lb_constrain(0);
        vars__.push_back(lambda);
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta = in__.simplex_constrain(J);
        size_t theta_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            vars__.push_back(theta(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 84;
            validate_non_negative_index("beta", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta(J);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("mu", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(J);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 88;
            validate_non_negative_index("mu_aux", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_aux(N);
            stan::math::initialize(mu_aux, DUMMY_VAR__);
            stan::math::fill(mu_aux, DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("sigma_aux", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_aux(N);
            stan::math::initialize(sigma_aux, DUMMY_VAR__);
            stan::math::fill(sigma_aux, DUMMY_VAR__);
            current_statement_begin__ = 90;
            validate_non_negative_index("nu_aux", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> nu_aux(N);
            stan::math::initialize(nu_aux, DUMMY_VAR__);
            stan::math::fill(nu_aux, DUMMY_VAR__);
            current_statement_begin__ = 92;
            validate_non_negative_index("sigma_prod_bu", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_prod_bu(J);
            stan::math::initialize(sigma_prod_bu, DUMMY_VAR__);
            stan::math::fill(sigma_prod_bu, DUMMY_VAR__);
            current_statement_begin__ = 93;
            validate_non_negative_index("pp", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, 1> pp(J);
            stan::math::initialize(pp, DUMMY_VAR__);
            stan::math::fill(pp, DUMMY_VAR__);
            current_statement_begin__ = 96;
            validate_non_negative_index("lambdas", "J", J);
            std::vector<double> lambdas(J, double(0));
            stan::math::initialize(lambdas, DUMMY_VAR__);
            stan::math::fill(lambdas, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 97;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 98;
                stan::model::assign(lambdas, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(theta, j, "theta", 1) * lambda), 
                            "assigning variable lambdas");
            }
            {
            current_statement_begin__ = 103;
            local_scalar_t__ tau0(DUMMY_VAR__);
            (void) tau0;  // dummy to suppress unused var warning
            stan::math::initialize(tau0, DUMMY_VAR__);
            stan::math::fill(tau0, DUMMY_VAR__);
            stan::math::assign(tau0,((m0 / (J - m0)) * (sigma_tilde / stan::math::sqrt((1.0 * N)))));
            current_statement_begin__ = 104;
            local_scalar_t__ tau(DUMMY_VAR__);
            (void) tau;  // dummy to suppress unused var warning
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            stan::math::assign(tau,(tau0 * tau_tilde));
            current_statement_begin__ = 108;
            local_scalar_t__ c2(DUMMY_VAR__);
            (void) c2;  // dummy to suppress unused var warning
            stan::math::initialize(c2, DUMMY_VAR__);
            stan::math::fill(c2, DUMMY_VAR__);
            stan::math::assign(c2,(slab_scale2 * c2_tilde));
            current_statement_begin__ = 110;
            validate_non_negative_index("phi_tilde", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi_tilde(J);
            stan::math::initialize(phi_tilde, DUMMY_VAR__);
            stan::math::fill(phi_tilde, DUMMY_VAR__);
            stan::math::assign(phi_tilde,stan::math::sqrt(elt_divide(multiply(c2, square(phi)), add(c2, multiply(square(tau), square(phi))))));
            current_statement_begin__ = 114;
            stan::math::assign(beta, elt_multiply(multiply(tau, phi_tilde), beta_tilde));
            current_statement_begin__ = 115;
            stan::math::assign(mu_aux, add(alpha, multiply(X, beta)));
            current_statement_begin__ = 117;
            stan::math::assign(mu, add(alpha, beta));
            }
            current_statement_begin__ = 122;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 123;
                stan::model::assign(sigma_aux, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(sigma, get_base1(SBU, i, "SBU", 1), "sigma", 1), 
                            "assigning variable sigma_aux");
                current_statement_begin__ = 124;
                stan::model::assign(nu_aux, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(nu, get_base1(SBU, i, "SBU", 1), "nu", 1), 
                            "assigning variable nu_aux");
            }
            current_statement_begin__ = 127;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 128;
                stan::model::assign(sigma_prod_bu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            get_base1(sigma_bu, get_base1(BU, j, "BU", 1), "sigma_bu", 1), 
                            "assigning variable sigma_prod_bu");
                current_statement_begin__ = 129;
                stan::model::assign(pp, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (1 - student_t_cdf(logH, get_base1(nu, j, "nu", 1), get_base1(mu, j, "mu", 1), get_base1(sigma, j, "sigma", 1))), 
                            "assigning variable pp");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 89;
            check_greater_or_equal(function__, "sigma_aux", sigma_aux, 0);
            current_statement_begin__ = 90;
            check_greater_or_equal(function__, "nu_aux", nu_aux, 0);
            current_statement_begin__ = 92;
            check_greater_or_equal(function__, "sigma_prod_bu", sigma_prod_bu, 0);
            current_statement_begin__ = 93;
            check_greater_or_equal(function__, "pp", pp, 0);
            check_less_or_equal(function__, "pp", pp, 1);
            // write transformed parameters
            if (include_tparams__) {
                size_t beta_j_1_max__ = J;
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    vars__.push_back(beta(j_1__));
                }
                size_t mu_j_1_max__ = J;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
                size_t mu_aux_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mu_aux_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_aux(j_1__));
                }
                size_t sigma_aux_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < sigma_aux_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma_aux(j_1__));
                }
                size_t nu_aux_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < nu_aux_j_1_max__; ++j_1__) {
                    vars__.push_back(nu_aux(j_1__));
                }
                size_t sigma_prod_bu_j_1_max__ = J;
                for (size_t j_1__ = 0; j_1__ < sigma_prod_bu_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma_prod_bu(j_1__));
                }
                size_t pp_j_1_max__ = J;
                for (size_t j_1__ = 0; j_1__ < pp_j_1_max__; ++j_1__) {
                    vars__.push_back(pp(j_1__));
                }
                size_t lambdas_k_0_max__ = J;
                for (size_t k_0__ = 0; k_0__ < lambdas_k_0_max__; ++k_0__) {
                    vars__.push_back(lambdas[k_0__]);
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_bsrmmlogt";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_tilde_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < beta_tilde_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_tilde" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "c2_tilde";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_tilde";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_k_0_max__ = J;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_bu_k_0_max__ = K;
        for (size_t k_0__ = 0; k_0__ < sigma_bu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_bu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_k_0_max__ = J;
        for (size_t k_0__ = 0; k_0__ < nu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_aux_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_aux_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_aux" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_aux_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigma_aux_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_aux" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t nu_aux_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < nu_aux_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_aux" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_prod_bu_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < sigma_prod_bu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_prod_bu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t pp_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < pp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambdas_k_0_max__ = J;
            for (size_t k_0__ = 0; k_0__ < lambdas_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambdas" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_tilde_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < beta_tilde_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_tilde" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "c2_tilde";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_tilde";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_k_0_max__ = J;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_bu_k_0_max__ = K;
        for (size_t k_0__ = 0; k_0__ < sigma_bu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_bu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_k_0_max__ = J;
        for (size_t k_0__ = 0; k_0__ < nu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_j_1_max__ = (J - 1);
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_aux_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_aux_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_aux" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_aux_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < sigma_aux_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_aux" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t nu_aux_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < nu_aux_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_aux" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_prod_bu_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < sigma_prod_bu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_prod_bu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t pp_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < pp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambdas_k_0_max__ = J;
            for (size_t k_0__ = 0; k_0__ < lambdas_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambdas" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_bsrmmlogt_namespace::model_bsrmmlogt stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
